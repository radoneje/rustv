


const io= require('socket.io')
class socket{
    constructor(server, knex, SPKstatus){
        this.clients=require('./clientsHandler')
        this.spkRoom=[];
        //this.emit=this.clients.sendToRoomUsers;
        this.io=require('socket.io')(server);
        this.io.binaryType = 'arraybuffer';
        var  _this=this;
        this.io.on('connection', async (socket)=> {

            var id=null;
            var roomid=null;
            var user=null;
            socket.on("hello",async ( data)=>{
                console.log("hello on room")
                var users=await knex.select("*").from("t_eventusers").where({id:data.id})
                if(users.length==0)
                    return
                if(users[0].email=='speaker@rustv.ru' && users[0].smsCode==999999 && _this.clients.SpkCount(data.roomid)>0 )
                {
                    socket.emit("SPKanotherConnectError",false);
                    return;
                }
                user=users[0];
                roomid=data.roomid;
                var client={
                    socket:socket,
                    user:users[0],
                    roomid:data.roomid,
                    isActive:true,
                    isAdmin:(users[0].email=='moderator@rustv.ru' && users[0].smsCode==999999),
                    isSpeaker:(users[0].email=='speaker@rustv.ru' && users[0].smsCode==999999)
                }
                id=_this.clients.add(client)
                client.id=id;
                if(users[0].email=='speaker@rustv.ru' && users[0].smsCode==999999)
                    _this.spkRoom.push({user:users[0],id:socket.id, socket:socket, isActive:true, roomid:data.roomid})
            })
            socket.on("helloNobody",async ( data)=>{
                var client={
                    id:socket.id,
                    socket:socket,
                    roomid:data.roomid,
                    isActive:true,
                }
                _this.clients.nobody.push(client);
            })
            socket.on("disconnect",(msg,  data)=>{
              //  if(id)
                try {
                    _this.clients.disActive(socket.id);
                    _this.spkRoom.forEach(u => {
                        if (u.id == socket.id) {
                            u.isActive = false
                        }
                    })
                    _this.clients.sendToRoomUsers("closeStageStream", socket.id, roomid)

                }
                catch (e) {
                    
                }
            });

            socket.on("addUserToSpeakerRoom", async (data)=>{
                console.log("addUserToSpeakerRoom", _this.spkRoom.length)
                var fond=_this.clients.clients.filter(c=>{return  c.isActive && c.user.id==data.userid && c.roomid==data.roomid});
                fond.forEach(f=>{
                    f.streamid=socket.id;
                    _this.spkRoom.push(f);
                    f.socket.emit("startSpeakerMeet",{streamid:socket.id});

                    // послать в f новое видео спикера
                    _this.spkRoom.forEach(a=>{
                        if(a.isActive && a.roomid==data.roomid)
                        {
                         //   a.socket.emit("newSpkVideo",{streamid:a.socket.id, user:user});
                       //     f.socket.emit("newSpkVideo",{streamid:a.socket.id, user:a.user});
                        }
                    })
                    console.log("push", f.id)
                })
            });
            socket.on("roomStopWowzaVideo", async (data)=>{

                _this.spkRoom.forEach(u=>{
                    if(u.streamid==data.streamid) {
                      //  u.isActive = false;
                        u.socket.emit("roomStopWowzaVideo");
                    }
                })
                _this.spkRoom= _this.spkRoom.filter(r=>r.streamid!=data.streamid)
            })
            socket.on("roomRecorder",async (data)=>{
                _this.spkRoom.push({user:null,id:socket.id, socket:socket, isActive:true, roomid:data.roomid})

            });
            socket.on("SpkRoomVideoPublished", async (data)=>{
                var item=this.clients.clients.filter(c=>c.socket.id==socket.id)
                var user={};
                if(item.length>0)
                    user=item[0].user
                setTimeout(()=>{
                    _this.spkRoom.forEach(s=>{
                        if(s.isActive && s.roomid==data.roomid ) {
                            s.socket.emit("newSpkVideo",{streamid:data.id, user:user});
                            if (s.socket.id == data.id)
                                s.streamid = s.socket.id;
                        }
                    })
                },500)
            });

            socket.on("selfVideoStarted",(msg,  data)=>{
                if(id)
                    _this.clients.startVideo(id, socket.id)
            });
            socket.on("senderReady",(data)=>{
                console.log("senderReady", data.parent)
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("senderReady",  data)
            });
            socket.on("receiverReady",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("receiverReady",  data)
            });
            socket.on("videoLink",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("videoLink",  data)
            });
            socket.on("stopSendVideo",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("stopSendVideo",  data)
            });
            socket.on("redirectToStage",(data)=>{
                data.from=socket.id;
                data.url="/stage/"+roomid;
                if(id)
                    _this.clients.fwd("redirectToStage",  data)
            });

          socket.on("SPKstatus",(dt)=>{
                if(id) {
                    if(SPKstatus.filter(s=>s.roomid==roomid)==0)
                        SPKstatus.push({roomid:roomid, status:dt})
                    else
                        SPKstatus.forEach(s=>{
                            if(s.roomid==roomid)
                                s.status=dt;
                        })
                    _this.clients.sendToRoomAdmins("SPKstatus", dt, roomid)
                }
            });
            socket.on("setSpkStatus",(dt)=>{
                if(id)
                    _this.clients.sendToRoomSpeakers("setSpkStatus",  dt, roomid)
            });
            socket.on("setSpkAlert",(dt)=>{
                if(id)
                    _this.clients.sendToRoomSpeakers("setSpkAlert",  dt, roomid)
            });
            socket.on("spkStartVks",(dt)=>{
                if(id)
                    _this.clients.sendToRoomSpeakers("spkStartVks",  dt, roomid)
            });
            socket.on("disconnectSPKvksUser",(dt)=>{
                if(id) {
                    //_this.clients.sendToRoomSpeakers("disconnectSPKvksUser", dt, roomid)
                    _this.clients.sendToRoomUsers("disconnectSPKvksUser", dt, roomid)
                }

            });
            socket.on("startDirectConnect",(dt)=>{
                var touserid=dt.to.id;
                var socketid=null
                _this.clients.clients.forEach(c=>{
                    if(c.user.id == dt.user.id && c.isActive==true && c.roomid==roomid)
                        socketid=c.socket.id;
                })
                dt.toSocketid=socketid;
                if(id && socketid)
                    _this.clients.sendToUser("startDirectConnect",  dt, touserid, roomid)
            });
            socket.on("disconnectDirectConnect",(dt)=>{

                console.log("disconnectDirectConnect", dt)
                if(id)
                    _this.clients.sendToRoomUsers("disconnectDirectConnect",  dt, roomid)
            })
            socket.on("voteAdd",(dt)=>{
                if(id)
                    _this.clients.sendToRoomUsers("voteAdd",  dt, roomid)
            })
            socket.on("voteChange",(dt)=>{
                if(id)
                    _this.clients.sendToRoomUsers("voteChange",  dt, roomid)
            })
            socket.on("voteAnswerAdd",(dt)=>{
                if(id)
                    _this.clients.sendToRoomUsers("voteAnswerAdd",  dt, roomid)
            })
            socket.on("voteAnswerChange",(dt)=>{
                if(id)
                    _this.clients.sendToRoomUsers("voteAnswerChange",  dt, roomid)
            })
            socket.on("vote",(dt)=>{
                if(id)
                    _this.clients.sendToRoomUsers("vote",  dt, roomid)
            })
            socket.on("newStageStream",(dt)=>{
                if(id) {

                    var cls=_this.clients.clients.filter(c=>c.socket.id==socket.id);
                    if(cls.length>0){
                        if(!cls[0].stage)
                            cls[0].stage=[];
                        cls[0].stage.push(dt)
                        _this.clients.sendToRoomUsers("newStageStream", dt, roomid)
                    }
                }
            })
            socket.on("closeStageStream",(dt)=>{
                if(id) {
                    console.log("dt");
                    _this.clients.clients.forEach(c=>{
                        if(c.stage)
                            c.stage=c.stage.filter(f=>f.streamid!=dt);
                    })
                    _this.clients.sendToRoomUsers("closeStageStream", dt, roomid)
                }
            })
            socket.on("videoReload",(dt)=>{
                if(id) {
                    dt.streamid=dt.streamid.replace(/dt^/, "")
                    _this.clients.sendToRoomUsers("reload", dt, roomid)


                }
            })
            socket.on("videoRemove",(dt)=>{
                if(id) {
                    dt.streamid=dt.streamid.replace(/dt^/, "")
                    _this.clients.sendToRoomUsers("redirect", {streamid:dt.streamid, url:"/room/"+roomid},roomid)
                }
            })
            socket.on("videoMute",(dt)=>{
                if(id) {
                    var socketid=dt.streamid.replace(/dt^/, "")
                    _this.clients.sendToRoomUsers("videoMute", {streamid:dt.streamid, val:dt.val},roomid)
                }
            })
            socket.on("videoPgm",(dt)=>{
                if(id) {
                    var socketid=dt.streamid.replace(/dt^/, "")
                    _this.clients.sendToRoomUsers("videoPgm", {streamid:dt.streamid, val:dt.val},roomid)
                }
            })
            socket.on("videoPIP",(dt)=>{
                if(id) {
                    var socketid=dt.streamid.replace(/dt^/, "")
                    _this.clients.sendToRoomUsers("videoPIP", {streamid:dt.streamid, val:dt.val},roomid)
                }
            })
            socket.on("messageToUser",(dt)=>{
                if(id) {
                    _this.clients.sendToRoomUsers("messageToUser", dt,roomid)
                }
            })
            socket.on("messageToMod",(dt)=>{
                if(id) {
                    dt.user=user;
                    _this.clients.sendToRoomUsers("messageToMod", dt,roomid)
                }
            })


            socket.on("getStageVideos",async (dt)=> {
                if (id) {
                    var arr=this.clients.clients.filter(c=>{
                        return c.isActive && c.stage && c.roomid==roomid });
                    var i=0;

                    arr.forEach(async c=>{
                        i++;
                            try {
                                var j=0;
                                for(var cc in c.stage)
                                {
                                    j++
                                    await delay(500*(i+j))
                                    socket.emit("newStageStream", cc);
                                }
                            }catch (e) {
                                console.warn("error send new stream")
                            }
                    })
                }
            });

            socket.on("receiverPlaying",(data)=>{
                /// reverce!!!
                var to=data.to;
                data.from=to;
                data.to=socket.id;
                if(id)
                    _this.clients.fwd("receiverPlaying",  data)
            });

        });
    }
}
function delay(time) {
    return new Promise((res, rej)=>{
        setTimeout(()=>{res()},time)
    })
}
module.exports = socket;