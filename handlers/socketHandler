


const io= require('socket.io')
class socket{
    constructor(server, knex){
        this.clients=require('./clientsHandler')
        //this.emit=this.clients.sendToRoomUsers;
        this.io=require('socket.io')(server);
        this.io.binaryType = 'arraybuffer';
        var  _this=this;
        this.io.on('connection', async (socket)=> {
            var id=null;
            var client=null;
            socket.on("hello",async ( data)=>{
                console.log("hello", data)
                var users=await knex.select("*").from("t_eventusers").where({id:data.id})
                client={socket:socket, user:users[0], roomid:data.roomid, isActive:true, isAdmin:(users[0].email=='moderator@rustv.ru'&& users[0].smsCode==999999)}
                id=_this.clients.add(client)
                client.id=id;
            })
            socket.on("disconnect",(msg,  data)=>{
                console.log("disconnect",id);
                if(id)
                    _this.clients.disActive(id);
            });
            socket.on("selfVideoStarted",(msg,  data)=>{
                if(id)
                    _this.clients.startVideo(id, socket.id)
            });
            socket.on("senderReady",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("senderReady",  data)
            });
            socket.on("receiverReady",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("receiverReady",  data)
            });
            socket.on("videoLink",(data)=>{
                data.from=socket.id;
                if(id)
                    _this.clients.fwd("videoLink",  data)
            });
            socket.on("receiverPlaying",(data)=>{
                /// reverce!!!
                var to=data.to;
                data.from=to;
                data.to=socket.id;
                if(id)
                    _this.clients.fwd("receiverPlaying",  data)
            });

        });
    }
}
module.exports = socket;